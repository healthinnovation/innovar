[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 innovar authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/vignette.html","id":"requeriments","dir":"Articles","previous_headings":"","what":"🟣 1. Requeriments","title":"Introduction to innovar","text":"","code":"library(innovar) library(sf) library(rgee) library(tidyverse) library(viridis) library(cowplot) library(mapview) ee_Initialize() # edit ── rgee 1.1.2.9000 ──────────────────────── earthengine-api 0.1.297 ──  ✓ user: not_defined  ✓ Initializing Google Earth Engine:  DONE!  ✓ Earth Engine account: users/antonybarja8 ──────────────────────────────────────────────────────────────────────"},{"path":"/articles/vignette.html","id":"vector-layer-reading-of-peru","dir":"Articles","previous_headings":"","what":"🟣 2. Vector layer reading of Peru","title":"Introduction to innovar","text":"","code":"data(\"Peru\") peru.region <- Peru %>%   dplyr::group_by(dep) %>%   summarise()  glimpse(peru.region) #> Rows: 25 #> Columns: 2 #> $ dep      <chr> \"AMAZONAS\", \"ANCASH\", \"APURIMAC\", \"AREQUIPA\", \"AYACUCHO\", \"CA… #> $ geometry <GEOMETRY [°]> POLYGON ((-78.52358 -6.0734..., POLYGON ((-77.45436 …"},{"path":"/articles/vignette.html","id":"exploration-peru-map","dir":"Articles","previous_headings":"","what":"🟣 3. Exploration Peru map","title":"Introduction to innovar","text":"","code":"mapview(peru.region,legend = NULL)"},{"path":"/articles/vignette.html","id":"transformation-of-sf-object-to-a-feature-collection","dir":"Articles","previous_headings":"","what":"🟣 4. Transformation of sf object to a feature collection","title":"Introduction to innovar","text":"","code":"peru.ee <- peru.region %>%   pol_as_ee(     id = c(\"dep\"),     simplify = 100     )"},{"path":"/articles/vignette.html","id":"processing-data-with-innovar","dir":"Articles","previous_headings":"","what":"🟣 5. Processing data with innovar","title":"Introduction to innovar","text":"","code":"peru.ndvi <- peru.ee %>%   get_vegetation(     from = \"2018-01-01\",     to = \"2019-12-31\",     band = \"NDVI\",     fun = \"mean\")  peru.def <- peru.ee %>%   get_def(     from = \"2018-02-01\",     to = \"2019-12-31\"     )  peru.pr <- peru.ee %>%   get_climate(     from = \"2018-02-01\",     to = \"2019-12-31\",     by = \"month\",     band = \"pr\",     fun = \"mean\"     ) [1] \"Extracting information [0/25]...\" [1] \"Extracting information [0/25]...\" [1] \"Extracting information [0/25]...\""},{"path":"/articles/vignette.html","id":"processing-data-for-mapping","dir":"Articles","previous_headings":"","what":"🟣 6. Processing data for mapping","title":"Introduction to innovar","text":"","code":"peru.ndvi.sf <- inner_join(peru.region,peru.ndvi,\"dep\") peru.pr.sf <- inner_join(peru.region,peru.pr ,\"dep\") peru.def.sf <- inner_join(peru.region,peru.def,\"dep\")"},{"path":"/articles/vignette.html","id":"exploration-data","dir":"Articles","previous_headings":"","what":"🟣 7. Exploration data","title":"Introduction to innovar","text":"","code":"# peru.ndvi.sf glimpse(peru.ndvi.sf) #> Rows: 25 #> Columns: 26 #> $ dep           <chr> \"AMAZONAS\", \"ANCASH\", \"APURIMAC\", \"AREQUIPA\", \"AYACUCHO\"… #> $ geometry      <GEOMETRY [°]> POLYGON ((-78.52358 -6.0734..., POLYGON ((-77.4… #> $ `NDVI2018-01` <dbl> 0.7618698, 0.3541663, 0.5611348, 0.1752459, 0.3877662, 0… #> $ `NDVI2018-02` <dbl> 0.7448193, 0.3682141, 0.5148198, 0.1865946, 0.4088631, 0… #> $ `NDVI2018-03` <dbl> 0.8029652, 0.3227369, 0.4254005, 0.1378987, 0.2981394, 0… #> $ `NDVI2018-04` <dbl> 0.7347934, 0.3371762, 0.4594330, 0.1448148, 0.3126478, 0… #> $ `NDVI2018-05` <dbl> 0.7689978, 0.3401211, 0.4600456, 0.1549041, 0.3284372, 0… #> $ `NDVI2018-06` <dbl> 0.7269479, 0.3541572, 0.5168134, 0.2049914, 0.4187075, 0… #> $ `NDVI2018-07` <dbl> 0.8020183, 0.4326799, 0.5730193, 0.2262396, 0.4889410, 0… #> $ `NDVI2018-08` <dbl> 0.8070872, 0.4148736, 0.5476173, 0.2076000, 0.4534685, 0… #> $ `NDVI2018-09` <dbl> 0.8101346, 0.4133105, 0.5284252, 0.1909058, 0.4427989, 0… #> $ `NDVI2018-10` <dbl> 0.8170537, 0.3509110, 0.4392075, 0.1657147, 0.3792495, 0… #> $ `NDVI2018-11` <dbl> 0.8242056, 0.3235377, 0.3881956, 0.1561938, 0.3439301, 0… #> $ `NDVI2018-12` <dbl> 0.7941804, 0.2909917, 0.3439517, 0.1461801, 0.3028986, 0… #> $ `NDVI2019-01` <dbl> 0.7721825, 0.3645026, 0.5550635, 0.2020809, 0.4484064, 0… #> $ `NDVI2019-02` <dbl> 0.7961381, 0.2789325, 0.3385547, 0.1465387, 0.2906443, 0… #> $ `NDVI2019-03` <dbl> 0.7618869, 0.2484661, 0.3389919, 0.1420803, 0.2598204, 0… #> $ `NDVI2019-04` <dbl> 0.7789701, 0.2859070, 0.4143425, 0.1487514, 0.2911723, 0… #> $ `NDVI2019-05` <dbl> 0.7956927, 0.3121799, 0.4847778, 0.1496801, 0.3300418, 0… #> $ `NDVI2019-06` <dbl> 0.8032700, 0.4255341, 0.5458136, 0.1922310, 0.4524076, 0… #> $ `NDVI2019-07` <dbl> 0.7483550, 0.4138269, 0.5001589, 0.1694564, 0.4188638, 0… #> $ `NDVI2019-08` <dbl> 0.8106696, 0.3689997, 0.4170743, 0.1537410, 0.3577194, 0… #> $ `NDVI2019-09` <dbl> 0.7802994, 0.3259332, 0.3905960, 0.1502291, 0.3389899, 0… #> $ `NDVI2019-10` <dbl> 0.8026335, 0.3055392, 0.3811376, 0.1417420, 0.3191863, 0… #> $ `NDVI2019-11` <dbl> 0.7666535, 0.2646288, 0.3565503, 0.1348875, 0.2862325, 0… #> $ `NDVI2019-12` <dbl> 0.7294221, 0.2311107, 0.3716801, 0.1345843, 0.2672917, 0… # peru.pr.sf glimpse(peru.pr.sf) #> Rows: 25 #> Columns: 25 #> $ dep         <chr> \"AMAZONAS\", \"ANCASH\", \"APURIMAC\", \"AREQUIPA\", \"AYACUCHO\", … #> $ geometry    <GEOMETRY [°]> POLYGON ((-78.52358 -6.0734..., POLYGON ((-77.454… #> $ `pr2018-02` <dbl> 87.0465834, 73.7189378, 207.3803203, 69.8458789, 168.25667… #> $ `pr2018-03` <dbl> 107.5493579, 96.1502156, 186.2385343, 71.8486227, 147.8381… #> $ `pr2018-04` <dbl> 101.7872776, 67.3360464, 63.3649774, 19.4575723, 83.356019… #> $ `pr2018-05` <dbl> 148.628940, 33.222182, 19.758310, 6.849864, 46.346711, 60.… #> $ `pr2018-06` <dbl> 358.2580687, 15.1085579, 44.5938228, 5.8503115, 77.7538876… #> $ `pr2018-07` <dbl> 192.5851479, 19.2629212, 29.5842716, 15.5349233, 65.273883… #> $ `pr2018-08` <dbl> 112.383666, 18.410591, 25.218101, 2.588099, 38.385395, 35.… #> $ `pr2018-09` <dbl> 69.6499857, 31.7195417, 46.7435603, 8.7868353, 123.9690801… #> $ `pr2018-10` <dbl> 322.719653, 94.278051, 88.712101, 18.894828, 95.677431, 56… #> $ `pr2018-11` <dbl> 203.290611, 70.305666, 66.502518, 12.946156, 59.295880, 15… #> $ `pr2018-12` <dbl> 180.3597326, 52.6465738, 97.7328550, 31.5980717, 67.998178… #> $ `pr2019-01` <dbl> 210.409459, 85.551838, 209.236384, 89.596080, 178.053166, … #> $ `pr2019-02` <dbl> 175.003831, 105.491556, 233.468952, 95.274428, 202.714531,… #> $ `pr2019-03` <dbl> 234.7843341, 127.5974202, 191.6842305, 71.7260920, 176.660… #> $ `pr2019-04` <dbl> 212.2099943, 49.7779733, 56.8066528, 18.7805499, 45.388637… #> $ `pr2019-05` <dbl> 206.5401270, 13.4165981, 13.4748249, 3.3185407, 16.5801441… #> $ `pr2019-06` <dbl> 202.3198751, 3.2593835, 3.9852015, 0.4747129, 4.7296860, 4… #> $ `pr2019-07` <dbl> 201.3254233, 4.1375128, 8.2567924, 1.3395482, 8.5875052, 4… #> $ `pr2019-08` <dbl> 101.9690712, 1.1197007, 6.4958554, 0.6039247, 4.1187032, 2… #> $ `pr2019-09` <dbl> 111.7446258, 14.0917587, 20.8372144, 5.5246722, 25.3573550… #> $ `pr2019-10` <dbl> 157.9943562, 39.6498518, 33.1662222, 4.9280120, 25.2767541… #> $ `pr2019-11` <dbl> 214.094409, 60.600451, 96.806961, 18.399584, 56.988385, 11… #> $ `pr2019-12` <dbl> 246.4900612, 80.2156226, 146.1758883, 24.0653149, 87.81586… # peru.def.sf glimpse(peru.def.sf) #> Rows: 25 #> Columns: 4 #> $ dep       <chr> \"AMAZONAS\", \"ANCASH\", \"APURIMAC\", \"AREQUIPA\", \"AYACUCHO\", \"C… #> $ geometry  <GEOMETRY [°]> POLYGON ((-78.52358 -6.0734..., POLYGON ((-77.45436… #> $ Adef_2018 <dbl> 314.4862620, 1.6449195, 3.8862691, 0.0656197, 91.9034760, 65… #> $ Adef_2019 <dbl> 216.8205146, 0.9261531, 2.2656311, 0.0198774, 65.4541265, 45…"},{"path":"/articles/vignette.html","id":"exploration-peru-ndvi-sf-map","dir":"Articles","previous_headings":"","what":"🟣 8. Exploration peru.ndvi.sf map","title":"Introduction to innovar","text":"","code":"mapview(   peru.ndvi.sf,   zcol=\"NDVI2018-01\",   layer.name = \"NDVI-2018-01\"   )"},{"path":"/articles/vignette.html","id":"exploration-peru-pr-sf-map","dir":"Articles","previous_headings":"","what":"🟣 9. Exploration peru.pr.sf map","title":"Introduction to innovar","text":"","code":"mapview(   peru.pr.sf,   zcol=\"pr2018-02\",   layer.name = \"pr-2018-02\"   )"},{"path":"/articles/vignette.html","id":"exploration-peru-def-sf-map","dir":"Articles","previous_headings":"","what":"🟣 10. Exploration peru.def.sf map","title":"Introduction to innovar","text":"","code":"mapview(   peru.def.sf,   zcol=\"Adef_2018\",   layer.name = \"def-2018\"   )"},{"path":"/articles/vignette.html","id":"mapping-climate-variables-with-the-innovar-theme","dir":"Articles","previous_headings":"","what":"🟣 11. Mapping climate variables with the innovar theme","title":"Introduction to innovar","text":"","code":"pr.plot <- peru.pr.sf %>%   ggplot() +   geom_sf(aes(fill=`pr2019-01`)) +   scale_fill_innova(discrete = FALSE,name=\"Precipitation\") +   theme_bw() ndvi.plot<- peru.ndvi.sf %>%   ggplot() +   geom_sf(aes(fill=`NDVI2019-01`)) +   scale_fill_innova(discrete = FALSE,name=\"NDVI\") +   theme_bw() def.plot <-  peru.def.sf %>%   ggplot() +   geom_sf(aes(fill=Adef_2019)) +   scale_fill_innova(discrete = FALSE,name=\"Deforestation\") +   theme_bw()"},{"path":"/articles/vignette.html","id":"final-plot","dir":"Articles","previous_headings":"","what":"🟣 12. Final plot","title":"Introduction to innovar","text":"","code":"pr.plot ndvi.plot def.plot"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Carrasco-Escobar. Author.            http://gcarrasco.rbind.io/ Renato Cava. Author. Jorge Ruiz-Cabrejos. Author. Brian Norman Peña-Calero. Author. Antony Barja-Ingaruca. Maintainer, author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carrasco-Escobar G, Cava R, Ruiz-Cabrejos J, Peña-Calero B, Barja-Ingaruca (2022). innovar: InnovaLab Toolkit. R package version 0.1.2, https://github.com/healthinnovation/innovar.","code":"@Manual{,   title = {innovar: InnovaLab Toolkit},   author = {Gabriel Carrasco-Escobar and Renato Cava and Jorge Ruiz-Cabrejos and Brian Norman Peña-Calero and Antony Barja-Ingaruca},   year = {2022},   note = {R package version 0.1.2},   url = {https://github.com/healthinnovation/innovar}, }"},{"path":[]},{"path":"/index.html","id":"-who-we-are","dir":"","previous_headings":"","what":"🔵 Who we are","title":"innovar:Library of functions of the Laboratory of Innovation in Health (InnovaLab)","text":"multidisciplinary team focused designing evaluating innovative accessible technologies improve people’s health. promote use technologies open data order lower implementation barriers, reproducibility increase impact innovation proposals. main lines research include development diagnostic detection systems, development tools environmental parameter detection, data science big data applied tropical diseases, geospatial analysis mobility migration patterns.","code":""},{"path":"/index.html","id":"-package-installation","dir":"","previous_headings":"","what":"🔵 Package installation","title":"innovar:Library of functions of the Laboratory of Innovation in Health (InnovaLab)","text":"can install first version innovar GitHub: following code just copy paste R console:","code":"if(!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"healthinnovation/innovar@v0.1.0\") library(innovar)"},{"path":[]},{"path":"/reference/Peru.html","id":null,"dir":"Reference","previous_headings":"","what":"Peru names and spatial — Peru","title":"Peru names and spatial — Peru","text":"dataset containing names 1874 districts, 196 provinces 25 departments Peru according INEI - 2017, additionally also limits administrative level 3 spatial vector format.","code":""},{"path":"/reference/Peru.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peru names and spatial — Peru","text":"","code":"data(Peru)"},{"path":"/reference/Peru.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Peru names and spatial — Peru","text":"dataset 1874 rows 9 variables: ubigeo Code six numbers district dep.code Code departament dep Name departament prov.code Code province prov Name province distr.code Code district distr Name district capital Name capital main","code":""},{"path":"/reference/Peru.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Peru names and spatial — Peru","text":"https://www.inei.gob.pe/","code":""},{"path":"/reference/allpautils_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove accents and hyphens in character vector — allpautils_names","title":"Remove accents and hyphens in character vector — allpautils_names","text":"function allow remove accents, hyphens   strange characters come UTF-8 encoding, intention   working standardized names texts.Review:   https://cran.r-project.org/web/packages/MazamaSpatialUtils/vignettes/MazamaSpatialUtils.html","code":""},{"path":"/reference/allpautils_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove accents and hyphens in character vector — allpautils_names","text":"","code":"allpautils_names(string)"},{"path":"/reference/allpautils_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove accents and hyphens in character vector — allpautils_names","text":"string Characters vector","code":""},{"path":"/reference/allpautils_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove accents and hyphens in character vector — allpautils_names","text":"","code":"library(innovar) string <- c(\"Perú\", \"Estados Unidos\") allpautils_names(string) #> [1] \"Peru\"           \"Estados Unidos\""},{"path":"/reference/export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export CSV file to MongoDB — export","title":"Export CSV file to MongoDB — export","text":"Python wrapper insert_many() method package pymongo insert list documents collection database MongoDB.","code":""},{"path":"/reference/export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export CSV file to MongoDB — export","text":"","code":"export(filepath, dbname, user, password, interpreter = NULL)"},{"path":"/reference/export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export CSV file to MongoDB — export","text":"filepath CSV file path. dbname Database name. user User name. password Password. interpreter Path Python interpreter (optional)","code":""},{"path":"/reference/export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export CSV file to MongoDB — export","text":"Confirmation message exporting successful. Else error.","code":""},{"path":"/reference/export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export CSV file to MongoDB — export","text":"","code":"if (FALSE) { library(innovar) data(\"cars\") write.csv(cars, \"cars.csv\", row.names = FALSE) dbname = \"<database-name>\" user <- Sys.getenv(\"USER\") password <- Sys.getenv(\"PASSWORD\") export(\"cars.csv\", dbname, user, password) }"},{"path":"/reference/gen_admin_div.html","id":null,"dir":"Reference","previous_headings":"","what":"Create categories for adiministrative divisions (Peru) — gen_admin_div","title":"Create categories for adiministrative divisions (Peru) — gen_admin_div","text":"Function 'gen_admin_div' returns natural, geographical,   administrative division Peru includes region, province district   provided function.","code":""},{"path":"/reference/gen_admin_div.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create categories for adiministrative divisions (Peru) — gen_admin_div","text":"","code":"gen_admin_div(x, method = \"Traditional\")"},{"path":"/reference/gen_admin_div.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create categories for adiministrative divisions (Peru) — gen_admin_div","text":"x x list/vector one 25 regions/departments names Peru (first-level administrative subdivisions). method defines type natural, geographical, administrative   division returned. Possible values : - Traditional: Coastal, Andes Mountains, Amazon Jungle, Lima & Callao   - TC: (Lima incluye Huarua/Cañete)Administratives Macro Regions Constitutional Tribunal   - Cardinal: North, South, Amazon Jungle, Lima & Callao   - Trad_Cardinal:  Coastal Andes Mountains divided North South (e.g. South Andes Mountains)","code":""},{"path":"/reference/gen_admin_div.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create categories for adiministrative divisions (Peru) — gen_admin_div","text":"Converts characters detects regions Peru resulting divisions specified.","code":""},{"path":"/reference/get_aero.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Aerosol index (UVAI) data of Sentinel5 — get_aero","title":"Extract Aerosol index (UVAI) data of Sentinel5 — get_aero","text":"function extract time series Aerosol index variables.","code":""},{"path":"/reference/get_aero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Aerosol index (UVAI) data of Sentinel5 — get_aero","text":"","code":"get_aero(from, to, band, region, fun = \"count\", scale = 1000)"},{"path":"/reference/get_aero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Aerosol index (UVAI) data of Sentinel5 — get_aero","text":", string object,starting final date. band name band. region feature feature collection. fun function extract statistic zonal (count, kurtosis, max, mean, median, min, mode, percentile, std, sum, variance, first). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_aero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Aerosol index (UVAI) data of Sentinel5 — get_aero","text":"sf object new variables.","code":""},{"path":"/reference/get_aero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Aerosol index (UVAI) data of Sentinel5 — get_aero","text":"Name bands. absorbing_aerosol_index (mol/m²): measure prevalence aerosols atmosphere, calculated equation using 354/388 wavelength pair. sensor_altitude (mol/m²): Altitude satellite respect geodetic sub-satellite point (WGS84). sensor_azimuth_angle (degrees): Azimuth angle satellite ground pixel location (WGS84); angle measured East--North. sensor_zenith_angle (degrees): Zenith angle satellite ground pixel location (WGS84); angle measured away vertical. sensor_zenith_angle (degrees): Azimuth angle Sun ground pixel location (WGS84); angle measured East--North. solar_zenith_angle (degrees):Zenith angle satellite ground pixel location (WGS84); angle measured away vertical.","code":""},{"path":"/reference/get_aero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Aerosol index (UVAI) data of Sentinel5 — get_aero","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region , id = 'distr' , simplify = 1000) # 2. Extracting climate information data <- region_ee %>% get_aero(   from = \"2019-02-01\", to = \"2019-12-31\",   band = \"absorbing_aerosol_index\", fun = \"max\") }"},{"path":"/reference/get_climate.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract climate data of TerraClimate — get_climate","title":"Extract climate data of TerraClimate — get_climate","text":"function extract time series climate variables.","code":""},{"path":"/reference/get_climate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract climate data of TerraClimate — get_climate","text":"","code":"get_climate(from, to, by, band, region, fun = \"count\", scale = 1000)"},{"path":"/reference/get_climate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract climate data of TerraClimate — get_climate","text":", string object,starting final date. two types increment sequence month year. band name band. region feature feature collection. fun function extract statistic zonal (count, kurtosis, max, mean, median, min, mode, percentile, std, sum, variance, first). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_climate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract climate data of TerraClimate — get_climate","text":"sf object new variables.","code":""},{"path":"/reference/get_climate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract climate data of TerraClimate — get_climate","text":"Name bands. aet (mm): Actual evapotranspiration, derived using one-dimensional soil water balance model. def (mm): Climate water deficit, derived using one-dimensional soil water balance model. pdsi : Palmer Drought Severity Index. pet(mm): Reference evapotranspiration (ASCE Penman-Montieth). pr (mm): Precipitation accumulation. ro (mm): Runoff, derived using one-dimensional soil water balance model. soil (mm): Soil moisture, derived using one-dimensional soil water balance model. srad (W/m²): Downward surface shortwave radiation. swe (mm): Snow water equivalent, derived using one-dimensional soil water balance model. tmmn (°C): Minimum temperature. tmmx (°C): Maximum temperature. vap (kPa): Vapor pressure vpd (kPa): Vapor pressure deficit. vs (m/s): Wind-speed 10m.","code":""},{"path":"/reference/get_climate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract climate data of TerraClimate — get_climate","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region , id = 'distr' , simplify = 1000) # 2. Extracting climate information data <- region_ee %>% get_climate(   from = \"2001-02-01\", to = \"2002-12-31\",   by = \"month\", band = \"tmmx\", fun = \"max\") }"},{"path":"/reference/get_co.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Carbon Monoxide data of Sentinel5 — get_co","title":"Extract Carbon Monoxide data of Sentinel5 — get_co","text":"function extract time series carbon monoxide.","code":""},{"path":"/reference/get_co.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Carbon Monoxide data of Sentinel5 — get_co","text":"","code":"get_co(from, to, band, region, fun = \"max\", scale = 1000)"},{"path":"/reference/get_co.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Carbon Monoxide data of Sentinel5 — get_co","text":", string object,starting final date. band name band. region feature feature collection. fun function extract statistic zonal (count, kurtosis, max, mean, median, min, mode, percentile, std, sum, variance, first). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_co.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Carbon Monoxide data of Sentinel5 — get_co","text":"sf object new variables.","code":""},{"path":"/reference/get_co.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Carbon Monoxide data of Sentinel5 — get_co","text":"Name bands. CO_column_number_density (mol/m²): Vertically integrated CO column density. H2O_column_number_density (mol/m²): Water vapor column. cloud_height (m): Scattering layer height. sensor_altitude (m): Altitude satellite respect geodetic sub-satellite point (WGS84). sensor_azimuth_angle (degrees): Azimuth angle satellite ground pixel location (WGS84); angle measured East--North. sensor_zenith_angle (degrees): Zenith angle satellite ground pixel location (WGS84); angle measured away vertical. solar_azimuth_angle (degrees) Azimuth angle Sun ground pixel location (WGS84); angle measured East--North. solar_zenith_angle (degrees): Zenith angle satellite ground pixel location (WGS84); angle measured away vertical.","code":""},{"path":"/reference/get_co.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Carbon Monoxide data of Sentinel5 — get_co","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region , id = 'distr' , simplify = 1000) # 2. Extracting climate information data <- region_ee %>% get_co(   from = \"2019-02-01\", to = \"2019-12-31\",   band = \"CO_column_number_density\", fun = \"max\") }"},{"path":"/reference/get_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract deforestation area data from Hansen — get_def","title":"Extract deforestation area data from Hansen — get_def","text":"function extract deforestation area data year 2001-2020","code":""},{"path":"/reference/get_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract deforestation area data from Hansen — get_def","text":"","code":"get_def(from, to, region, scale = 100)"},{"path":"/reference/get_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract deforestation area data from Hansen — get_def","text":", string object,starting final date. region region object sf. scale nominal scale meters projection work .","code":""},{"path":"/reference/get_def.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract deforestation area data from Hansen — get_def","text":"tibble object new variable km2","code":""},{"path":"/reference/get_def.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract deforestation area data from Hansen — get_def","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region, id = 'distr' ,simplify = 1000)  # 2. Extracting deforestation area data data <- region_ee %>% get_def(  from = '2001-01-01',  to = '2005-12-31',  region = region_ee,  scale = 30 ) }"},{"path":"/reference/get_etp.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract evapotranspiration data of Modis — get_etp","title":"Extract evapotranspiration data of Modis — get_etp","text":"function extract ETP time series MODIS month.","code":""},{"path":"/reference/get_etp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract evapotranspiration data of Modis — get_etp","text":"","code":"get_etp(from, to, band, region, fun = \"count\", scale = 1000)"},{"path":"/reference/get_etp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract evapotranspiration data of Modis — get_etp","text":", string object,starting final date. band name band. region region object sf. fun function extract statistic zonal (count, kurtosis, max,mean, median , min , mode , percentile, std, sum , variance, first). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_etp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract evapotranspiration data of Modis — get_etp","text":"sf object new variables.","code":""},{"path":"/reference/get_etp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract evapotranspiration data of Modis — get_etp","text":"Name bands. ET (kg/m²): Total evapotranspiration. LE (J/m²):  Average latent heat flux. PET (kg/m²): Total potential evapotranspiration. PLE (j/m²): Average potential latent heat flux. ET_QC: Evapotranspiration quality control flags","code":""},{"path":"/reference/get_etp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract evapotranspiration data of Modis — get_etp","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region, id = \"distr\", simplify = 1000)  # 2. Extracting climate information data <- region_ee %>%   get_etp(from = \"2001-02-01\", to = \"2003-12-31\", band = \"ET\", fun = \"max\") }"},{"path":"/reference/get_ghm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Global Human Modification data — get_ghm","title":"Extract Global Human Modification data — get_ghm","text":"function extract Global Human Modification data year 2016","code":""},{"path":"/reference/get_ghm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Global Human Modification data — get_ghm","text":"","code":"get_ghm(region, fun = \"count\", scale = 1000)"},{"path":"/reference/get_ghm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Global Human Modification data — get_ghm","text":"region region object sf. fun function extract statistic zonal (count, kurtosis, max, mean, median, min, mod, percentile, std, sum, variance, first). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_ghm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Global Human Modification data — get_ghm","text":"tibble object new variable km².","code":""},{"path":"/reference/get_ghm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Global Human Modification data — get_ghm","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region, id = 'distr' ,simplify = 1000)  # 2. Extracting climate information data <- region_ee %>% get_gHM(  fun = \"max\" ) }"},{"path":"/reference/get_nlv1.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Night time light data — get_nlv1","title":"Extract Night time light data — get_nlv1","text":"function extract time series night time light year 1992-2014.","code":""},{"path":"/reference/get_nlv1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Night time light data — get_nlv1","text":"","code":"get_nlv1(from, to, region, fun = \"mean\", scale = 100)"},{"path":"/reference/get_nlv1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Night time light data — get_nlv1","text":", string object,starting final date. region feature collection. fun function extract statistic zonal (count, kurtosis, max, mean, median, min, mode, percentile, std, sum, variance). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_nlv1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Night time light data — get_nlv1","text":"tibble new variables.","code":""},{"path":"/reference/get_nlv1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Night time light data — get_nlv1","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region, id = 'distr' , simplify = 1000)  # 2. Extracting climate information data <- region_ee %>% get_nlv1(   from = \"2001-01-01\", to = \"2003-01-01\",fun = \"max\",scale = 1000) }"},{"path":"/reference/get_nlv2.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Night time light data — get_nlv2","title":"Extract Night time light data — get_nlv2","text":"function extract time series night time light year 2012-2020.","code":""},{"path":"/reference/get_nlv2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Night time light data — get_nlv2","text":"","code":"get_nlv2(from, to, region, fun = \"mean\", scale = 100)"},{"path":"/reference/get_nlv2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Night time light data — get_nlv2","text":", string object,starting final date. region feature collection. fun function extract statistic zonal (count, kurtosis, max, mean, median, min, mode, percentile, std, sum, variance). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_nlv2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Night time light data — get_nlv2","text":"tibble new variables.","code":""},{"path":"/reference/get_nlv2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Night time light data — get_nlv2","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region, id = 'distr' , simplify = 1000)  # 2. Extracting climate information data <- region_ee %>% get_nlv2(   from = \"2001-01-01\", to = \"2003-01-01\",fun = \"max\",scale = 1000) }"},{"path":"/reference/get_no2.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Nitrogen Dioxide data of Sentinel5 — get_no2","title":"Extract Nitrogen Dioxide data of Sentinel5 — get_no2","text":"function extract time series nitrogen dioxide.","code":""},{"path":"/reference/get_no2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Nitrogen Dioxide data of Sentinel5 — get_no2","text":"","code":"get_no2(from, to, band, region, fun = \"max\", scale = 1000)"},{"path":"/reference/get_no2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Nitrogen Dioxide data of Sentinel5 — get_no2","text":", string object,starting final date. band name band. region feature feature collection. fun function extract statistic zonal (count, kurtosis, max, mean, median, min, mode, percentile, std, sum, variance, first). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_no2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Nitrogen Dioxide data of Sentinel5 — get_no2","text":"sf object new variables.","code":""},{"path":"/reference/get_no2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Nitrogen Dioxide data of Sentinel5 — get_no2","text":"Name bands. NO2_column_number_density (mol/m²): Total vertical column NO2 (ratio slant column density NO2 total air mass factor). tropospheric_NO2_column_number_density (mol/m²): tropospheric vertical column NO2. stratospheric_NO2_column_number_density (mol/m²): stratospheric vertical column NO2 NO2_slant_column_number_density (mol/m²): NO2 slant column density tropopause_pressure (Pa): topopause pressure absorbing_aerosol_index: \tAerosol index (wavelengths 354/388, .e. OMI pair) AER_AI level 2 product. See Level 2 Algorithms - Aerosol Index. cloud_fraction: Effective cloud fraction. See Sentinel 5P L2 Input/Output Data Definition Spec, p.220. sensor_altitude (m): Altitude satellite respect geodetic sub-satellite point (WGS84). sensor_azimuth_angle (degrees): Azimuth angle satellite ground pixel location (WGS84); angle measured East--North. sensor_zenith_angle (degrees): Zenith angle satellite ground pixel location (WGS84); angle measured away vertical. solar_azimuth_angle (degrees): Azimuth angle Sun ground pixel location (WGS84); angle measured East--North. solar_zenith_angle (degrees): Zenith angle satellite ground pixel location (WGS84); angle measured away vertical.","code":""},{"path":"/reference/get_no2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Nitrogen Dioxide data of Sentinel5 — get_no2","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region , id = 'distr' , simplify = 1000) # 2. Extracting climate information data <- region_ee %>% get_no2(   from = \"2019-02-01\", to = \"2019-12-31\",   band = \"CO_column_number_density\", fun = \"max\") }"},{"path":"/reference/get_o3.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Ozone data of Sentinel5 — get_o3","title":"Extract Ozone data of Sentinel5 — get_o3","text":"function extract time series ozone.","code":""},{"path":"/reference/get_o3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Ozone data of Sentinel5 — get_o3","text":"","code":"get_o3(from, to, band, region, fun = \"max\", scale = 1000)"},{"path":"/reference/get_o3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Ozone data of Sentinel5 — get_o3","text":", string object,starting final date. band name band. region feature feature collection. fun function extract statistic zonal (count, kurtosis, max, mean, median, min, mode, percentile, std, sum, variance, first). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_o3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Ozone data of Sentinel5 — get_o3","text":"sf object new variables.","code":""},{"path":"/reference/get_o3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Ozone data of Sentinel5 — get_o3","text":"Name bands. O3_column_number_density (mol/m²): Total atmospheric column O3 surface top atmosphere, calculated DOAS algorithm. O3_column_number_density_amf (mol/m²): Weighted mean cloudy clear air mass factor (amf) weighted intensity-weighted cloud fraction. O3_slant_column_number_density (mol/m²): O3 ring corrected slant column number density. O3_effective_temperature (K): Ozone cross section effective temperature. cloud_fraction: Effective cloud fraction. See Sentinel 5P L2 Input/Output Data Definition Spec, p.220. sensor_azimuth_angle (degrees): \tAzimuth angle satellite ground pixel location (WGS84); angle measured East--North. sensor_zenith_angle (degrees): Zenith angle satellite ground pixel location (WGS84); angle measured away vertical. solar_azimuth_angle (degrees): Azimuth angle Sun ground pixel location (WGS84); angle measured East--North. solar_zenith_angle (degrees): Zenith angle satellite ground pixel location (WGS84); angle measured away vertical.","code":""},{"path":"/reference/get_o3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Ozone data of Sentinel5 — get_o3","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object region <- Peru region_ee <- pol_as_ee(region , id = 'distr' , simplify = 1000) # 2. Extracting climate information data <- region_ee %>% get_o3(   from = \"2019-02-01\", to = \"2019-12-31\",   band = \"CO_column_number_density\", fun = \"max\") }"},{"path":"/reference/get_od_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get census-like data in a origin-destination format — get_od_data","title":"Get census-like data in a origin-destination format — get_od_data","text":"Process data frame resulting reading raw query Peru census 2017 data containing origin destination locations tidy long format (sparse) matrix form.","code":""},{"path":"/reference/get_od_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get census-like data in a origin-destination format — get_od_data","text":"","code":"get_od_data(x, wide = FALSE, sparse = TRUE)"},{"path":"/reference/get_od_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get census-like data in a origin-destination format — get_od_data","text":"x data frame resulting reading raw query Peru census 2017 data containing origin destination locations. information Details section. wide logical. output wide format? 'TRUE', matrix returned origins rows destinations columns. Defaults 'FALSE'. sparse logical. output wide format (.e. wide = TRUE), sparse matrix returned? Defaults 'TRUE'.","code":""},{"path":"/reference/get_od_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get census-like data in a origin-destination format — get_od_data","text":"Data frame (matrix) origin-destination format.","code":""},{"path":"/reference/get_od_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get census-like data in a origin-destination format — get_od_data","text":"Institute Statistics Informatics (INEI, acronym Spanish) Peru carried last census 2017. census data can queried 2017 Census RADATAM platform. query result can downloaded Excel workbook (.xlsx). get_od_data function aids process raw query results 2017 census data involving origin destination location (district province level). example, querying question Distrito o país donde vivía hace 5 años (District country used live 5 years ago) district level, one gets every district list districts countries given answer question frequencies (number people living district used live district B 5 years ago). raw report obtained querying question Distrito o país donde vivía hace 5 años provided package example dataset name migration17raw. examples section , show use get_od_data function process raw dataset get different types outputs analyze origin-destination information.","code":""},{"path":[]},{"path":"/reference/get_od_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get census-like data in a origin-destination format — get_od_data","text":"","code":"if (FALSE) { data(\"migration17raw\")  # Check that this raw data set is the result of reading an Excel file without # column names head(migration17raw)  # Origin-destination data in long format (data frame) od_long <- get_od_data(migration17raw) head(od_long)  # Origin-destination data in wide format (sparse matrix) od_wide_sparse <- get_od_data(migration17raw, wide = TRUE) od_wide_sparse[1:5, 1:5] print(object.size(od_wide_sparse), units = \"auto\") # This is lighter  # Origin-destination data in wide format (regular matrix) od_wide <- get_od_data(migration17raw, wide = TRUE, sparse = FALSE) od_wide[1:5, 1:5] print(object.size(od_wide), units = \"auto\") # This is heavier }"},{"path":"/reference/get_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract population data of WorldPop — get_pop","title":"Extract population data of WorldPop — get_pop","text":"function extract time series number population year.","code":""},{"path":"/reference/get_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract population data of WorldPop — get_pop","text":"","code":"get_pop(from, to, region, fun = \"count\", scale = 100)"},{"path":"/reference/get_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract population data of WorldPop — get_pop","text":", string object,starting final date. region feature collection. fun function extract statistic zonal (count, kurtosis, max, mean, median, min, mode, percentile, std, sum, variance). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract population data of WorldPop — get_pop","text":"tibble new variables.","code":""},{"path":"/reference/get_pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract population data of WorldPop — get_pop","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region , id = 'distr' , simplify = 1000) # 2. Extracting climate information data <- region_ee %>% get_pop(   from = \"2001-01-01\", to = \"2003-01-01\",fun = \"max\",scale = 100) }"},{"path":"/reference/get_so2.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Ozone data of Sentinel5 — get_so2","title":"Extract Ozone data of Sentinel5 — get_so2","text":"function extract time series ozone.","code":""},{"path":"/reference/get_so2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Ozone data of Sentinel5 — get_so2","text":"","code":"get_so2(from, to, band, region, fun = \"max\", scale = 1000)"},{"path":"/reference/get_so2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Ozone data of Sentinel5 — get_so2","text":", string object,starting final date. band name band. region feature feature collection. fun function extract statistic zonal (count, kurtosis, max, mean, median, min, mode, percentile, std, sum, variance, first). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_so2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Ozone data of Sentinel5 — get_so2","text":"sf object new variables.","code":""},{"path":"/reference/get_so2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Ozone data of Sentinel5 — get_so2","text":"Name bands. SO2_column_number_density (mol/m²): SO2 vertical column density ground level, calculated using DOAS technique. SO2_column_number_density_amf (mol/m²): Weighted mean cloudy clear air mass factor (amf) weighted intensity-weighted cloud fraction. SO2_slant_column_number_density (mol/m²): SO2 ring corrected slant column number density. cloud_fraction: Effective cloud fraction. See Sentinel 5P L2 Input/Output Data Definition Spec, p.220. sensor_azimuth_angle (degree):  Azimuth angle satellite ground pixel location (WGS84); angle measured East--North. sensor_zenith_angle (degree): Zenith angle satellite ground pixel location (WGS84); angle measured away vertical. solar_azimuth_angle (degree): Azimuth angle Sun ground pixel location (WGS84); angle measured East--North. solar_zenith_angle (degree): Zenith angle satellite ground pixel location (WGS84); angle measured away vertical. SO2_column_number_density_15km (mol/m²): SO2 vertical column density 15km, calculated using DOAS technique.","code":""},{"path":"/reference/get_so2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Ozone data of Sentinel5 — get_so2","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region , id = 'distr' , simplify = 1000) # 2. Extracting climate information data <- region_ee %>% get_so2(   from = \"2019-02-01\", to = \"2019-12-31\",   band = \"SO2_column_number_density\", fun = \"max\") }"},{"path":"/reference/get_urban.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract urban area data of MODIS Landcover — get_urban","title":"Extract urban area data of MODIS Landcover — get_urban","text":"function extract time series urban area MODIS Landcover","code":""},{"path":"/reference/get_urban.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract urban area data of MODIS Landcover — get_urban","text":"","code":"get_urban(from, to, region, scale = 1000)"},{"path":"/reference/get_urban.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract urban area data of MODIS Landcover — get_urban","text":", string object,starting final date. region feature feature collection scale nominal scale meters projection work .","code":""},{"path":"/reference/get_urban.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract urban area data of MODIS Landcover — get_urban","text":"tibble object new variable km2","code":""},{"path":"/reference/get_urban.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract urban area data of MODIS Landcover — get_urban","text":"","code":"if (FALSE) {  library(innovar) library(rgee) library(sf) ee_Initialize() data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region, id = 'distr' ,simplify = 1000) data <- get_climate(from = '2008-01-01', to = '2010-01-01', region = region)  }"},{"path":"/reference/get_vegetation.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract vegetation index of MODIS — get_vegetation","title":"Extract vegetation index of MODIS — get_vegetation","text":"function extract values vegetation month.","code":""},{"path":"/reference/get_vegetation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract vegetation index of MODIS — get_vegetation","text":"","code":"get_vegetation(from, to, band, region, fun = \"count\", scale = 1000)"},{"path":"/reference/get_vegetation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract vegetation index of MODIS — get_vegetation","text":", starting final range date. band name bands. region feature feature collection. fun function extract statistic zonal (count, kurtosis, max, mean, median , min, mode , percentile , std, sum, variance, first). scale nominal scale meters projection work .","code":""},{"path":"/reference/get_vegetation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract vegetation index of MODIS — get_vegetation","text":"sf object new variables.","code":""},{"path":"/reference/get_vegetation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract vegetation index of MODIS — get_vegetation","text":"Name bands. NDVI: Normalized Difference Vegetation Index. EVI: Enhanced Vegetation Index. SAVI: Soil Adjusted Vegetation Index.","code":""},{"path":"/reference/get_vegetation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract vegetation index of MODIS — get_vegetation","text":"","code":"if (FALSE) {  library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize()  # 1. Reading a sf object data(\"Peru\") region <- Peru region_ee <- pol_as_ee(region, id = \"distr\", simplify = 1000)  # 2. Extracting climate information data <- region_ee %>% get_vegetation(   from = \"2001-02-01\", to = \"2002-12-31\", band = \"NDVI\", fun = \"max\" ) }"},{"path":"/reference/innova_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Return function to interpolate a lis color palette — innova_pal","title":"Return function to interpolate a lis color palette — innova_pal","text":"Return function interpolate lis color palette","code":""},{"path":"/reference/innova_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return function to interpolate a lis color palette — innova_pal","text":"","code":"innova_pal(palette = \"ccvi\", reverse = FALSE, ...)"},{"path":"/reference/innova_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return function to interpolate a lis color palette — innova_pal","text":"palette Character name palette lis_palettes reverse Boolean indicating whether palette reversed ... Additional arguments pass colorRampPalette()","code":""},{"path":"/reference/innova_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return function to interpolate a lis color palette — innova_pal","text":"","code":"if (FALSE) { library(innovar) library(scales) pal <- innova_pal(\"ccvi\")(9) show_col(pal) }"},{"path":"/reference/migration17raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw migration data from the Peru census of 2017 — migration17raw","title":"Raw migration data from the Peru census of 2017 — migration17raw","text":"Institute Statistics Informatics (INEI, acronym Spanish) Peru carried last census 2017. census data can queried 2017 Census RADATAM platform.","code":""},{"path":"/reference/migration17raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw migration data from the Peru census of 2017 — migration17raw","text":"","code":"data(migration17raw)"},{"path":"/reference/migration17raw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw migration data from the Peru census of 2017 — migration17raw","text":"untidy data frame resulted reading Excel file without formatting setting column names, containing information migration described .","code":""},{"path":"/reference/migration17raw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Raw migration data from the Peru census of 2017 — migration17raw","text":"https://censos2017.inei.gob.pe/redatam/","code":""},{"path":"/reference/migration17raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raw migration data from the Peru census of 2017 — migration17raw","text":"data set obtained reading downloaded report generated querying question Distrito o país donde vivía hace 5 años (District country used live 5 years ago) district level without setting column names readxl::read_excel(<report-filepath>, col_names = FALSE). downloaded report Excel file containing metadata query list every district districts countries given answer question frequencies (number people living district used live district B 5 years ago). Thus, 5-year migration information 1874 districts Peru, processed tidy origin-destination format. function get_od_data package aids processing kind reports Peru census 2017.","code":""},{"path":[]},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pol_as_ee.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygon to earth engine — pol_as_ee","title":"Polygon to earth engine — pol_as_ee","text":"function transform polygon featurecollection.","code":""},{"path":"/reference/pol_as_ee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polygon to earth engine — pol_as_ee","text":"","code":"pol_as_ee(x, id, simplify = 500)"},{"path":"/reference/pol_as_ee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polygon to earth engine — pol_as_ee","text":"x polygon sf object. id main id name sf object. simplify number simplify sf polygon  keeping topology","code":""},{"path":"/reference/pol_as_ee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polygon to earth engine — pol_as_ee","text":"feature collection","code":""},{"path":"/reference/pol_as_ee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polygon to earth engine — pol_as_ee","text":"","code":"if (FALSE) { library(tidyverse) library(rgee) library(innovar) library(sf) ee_Initialize() # 1. Reading a sf object data(\"Peru\") region <- Peru %>% filter(reg == 'LIMA') region_ee <- pol_as_ee(region , id = 'distr' , simplify = 1000) class(region_ee) }"},{"path":"/reference/read_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility for dataset batch importing  in multiple formats — read_batch","title":"Utility for dataset batch importing  in multiple formats — read_batch","text":"Reference: https://www.gerkelab.com/blog/2018/09/import-directory-csv-purrr-readr/#'","code":""},{"path":"/reference/read_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility for dataset batch importing  in multiple formats — read_batch","text":"","code":"read_batch(data_dir, ext = \"csv\", fun = readr::read_csv, env = TRUE, ...)"},{"path":"/reference/read_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility for dataset batch importing  in multiple formats — read_batch","text":"data_dir data_dir file path contains files imported ext extension \"*.ext\" files imported. Default \"csv\" fun import function passsed `map` import datasets. Must able read files `ext` extension env Whether file imported .GlobalEnv. `FALSE` list containing dataset generated ... Arguments passed import function Import multiple files","code":""},{"path":"/reference/read_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility for dataset batch importing  in multiple formats — read_batch","text":"","code":"if (FALSE) { read_batch(data_dir = data_dir) read_batch(data_dir = data_dir, extension = \"dta\", fun = haven::read_dta) read_batch(data_dir = data_dir, extension = \"dta\", fun = haven::read_dta, env = F) }"},{"path":"/reference/scale_color_innova.html","id":null,"dir":"Reference","previous_headings":"","what":"Color scale constructor for lis colors — scale_color_innova","title":"Color scale constructor for lis colors — scale_color_innova","text":"Color scale constructor lis colors","code":""},{"path":"/reference/scale_color_innova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color scale constructor for lis colors — scale_color_innova","text":"","code":"scale_color_innova(palette = \"ccvi\", discrete = TRUE, reverse = FALSE, ...)"},{"path":"/reference/scale_color_innova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color scale constructor for lis colors — scale_color_innova","text":"palette Character name palette lis_palettes discrete Boolean indicating whether color aesthetic discrete reverse Boolean indicating whether palette reversed ... Additional arguments passed discrete_scale() scale_color_gradientn(), used respectively discrete TRUE FALSE","code":""},{"path":"/reference/scale_color_innova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color scale constructor for lis colors — scale_color_innova","text":"","code":"if (FALSE) { library(ggplot2) library(innovar) # Default discrete palette ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) + geom_point(size = 4) + scale_color_innova()  # Default continuous palette ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) + geom_point(size = 4, alpha = .6) + scale_color_innova(discrete = FALSE) }"},{"path":"/reference/scale_fill_innova.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill scale constructor for lis colors — scale_fill_innova","title":"Fill scale constructor for lis colors — scale_fill_innova","text":"Fill scale constructor lis colors","code":""},{"path":"/reference/scale_fill_innova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill scale constructor for lis colors — scale_fill_innova","text":"","code":"scale_fill_innova(palette = \"ccvi\", discrete = TRUE, reverse = FALSE, ...)"},{"path":"/reference/scale_fill_innova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill scale constructor for lis colors — scale_fill_innova","text":"palette Character name palette lis_palettes discrete Boolean indicating whether color aesthetic discrete reverse Boolean indicating whether palette reversed ... Additional arguments passed discrete_scale() scale_fill_gradientn(), used respectively discrete TRUE FALSE","code":""},{"path":"/reference/scale_fill_innova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill scale constructor for lis colors — scale_fill_innova","text":"","code":"if (FALSE) { library(ggplot2) library(innovar) ggplot(mpg, aes(manufacturer, fill = manufacturer)) + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_fill_innova() }"},{"path":"/reference/show_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a set of palette color Lab — show_pal","title":"Show a set of palette color Lab — show_pal","text":"Show set palette color Lab","code":""},{"path":"/reference/show_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a set of palette color Lab — show_pal","text":"","code":"show_pal(name = \"all\", n = 5, rev = TRUE, ...)"},{"path":"/reference/show_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a set of palette color Lab — show_pal","text":"name Character name palette lis_palettes n Integer, number colors rev Boolean indicating whether palette reversed ... Additional arguments passed seecol()","code":""},{"path":"/reference/show_pal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show a set of palette color Lab — show_pal","text":"Name color palette available ccvi npr blmbrg ctp jama mlobo btran nasa","code":""},{"path":"/reference/show_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a set of palette color Lab — show_pal","text":"","code":"if (FALSE) { library(innovar) show_pal(name = \"nasa\",rev = TRUE, n = 5) show_pal()  }"},{"path":"/reference/vulnerability_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Vulnerability Index — vulnerability_index","title":"Vulnerability Index — vulnerability_index","text":"allows observations ordered different methods (default   percentile rank), consideration domains grouping indicators.","code":""},{"path":"/reference/vulnerability_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vulnerability Index — vulnerability_index","text":"","code":"vulnerability_index(   data,   direct = NULL,   inverse = NULL,   table = NULL,   weighted = TRUE,   domains = \"default\",   level = NULL,   ordered = TRUE,   method = \"percent_rank\",   complete = TRUE,   na.rm = FALSE )"},{"path":"/reference/vulnerability_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vulnerability Index — vulnerability_index","text":"data dataframe containing variables analyzed. direct vector indicating name variables contribute directly vulnerability index. inverse vector indicating name variables contribute inversely vulnerability index. table dataframe indicating variables \"Codename\", \"Direction\", \"Domain\" \"Geographic_scale\" minimum. argument specified, longer necessary specify direct inverse arguments. weighted logical value indicating whether \"Domain\" information used index calculation. domains vector indicating names domains grouping variables interest. argument \"table\" containing variable \"Domain\" used, \"default\" indicated argument. level vector indicating level analysis. currently supports 3 values:\"departamental\", \"provincial\", \"distrital\". ordered logical value indicating whether cases analyzed ordered highest lowest. method vector indicating analysis method used index. Currently \"percent_rank\" supported. complete true, results table show variables dataframe addition computations performed. na.rm logical value indicating whether cases missing values eliminated.","code":""},{"path":"/reference/vulnerability_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vulnerability Index — vulnerability_index","text":"tibble containing variables analyzed function.","code":""},{"path":[]},{"path":"/reference/vulnerability_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vulnerability Index — vulnerability_index","text":"","code":"if (FALSE) { Sigma_Dom1 <- matrix(rep(c(1, runif(4, 0.65, 0.9)), 4),                      4, 4, byrow = TRUE)  Sigma_Dom2 <- matrix(rep(c(1, runif(4, 0.65, 0.9)), 4),                      4, 4, byrow = TRUE)  Dom1 <- as.data.frame(MASS::mvrnorm(100, rep(0, 4), Sigma_Dom1)) Dom2 <- as.data.frame(MASS::mvrnorm(100, rep(0, 4), Sigma_Dom2)) colnames(Dom2) <- paste0(\"V\", 5:8)  df_example <- data.frame(distr = paste0(\"distr\", 1:100)) df_example <- cbind(df_example, Dom1, Dom2)  table_var <- data.frame(   Codename = paste0(\"V\", 1:8),   Direction = \"Direct\",   Domain = c(rep(\"Dom1\", 4), rep(\"Dom2\", 4)),   Geographic_scale = \"Distrital\" )  vulnerability_index(df_example, table = table_var,                     level = \"distrital\", na.rm = TRUE,                     method = \"pca\")   vulnerability_index(df_example, table = table_var,                     level = \"distrital\", na.rm = TRUE,                     method = \"percent_rank\") }"},{"path":"/news/index.html","id":"innovar-010-","dir":"Changelog","previous_headings":"","what":"Innovar 0.1.0 📦","title":"Innovar 0.1.0 📦","text":"🔵 25 functions available health analysis spatial modelling 🌎. 🔵 9 colors palettes 🎨 customized innovar. ccvi ,npr , blmbrg, ecomst , ctp , jama, mlobo, btran, nasa 🔵 Creation 2 dataset 🗂 : Peru, migrationraw 🔵 Implement  GitHub Actions test package multiple Operative System deployment webpage. 🔵  GitHub Actions citation. 🔵 1 theme customized xaringan 🔵 1 customized template rstudio project 🔵 Add new shields logo package. 🔵 New vignette. 🔵 Incorporation MIT licence .","code":""}]
